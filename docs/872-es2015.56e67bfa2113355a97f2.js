!function(){"use strict";class t{constructor(t){this.matrix=t,this.rows=t.length,this.columns=t[0].length,t.forEach(t=>{if(t.length!=this.columns)throw new Error("Invalid matrix, not all columns of same size")})}static createBlankSquareMatrixFromDimensions(r,e=!1){let s=[];for(let t=0;t<r;t++){let i=[];for(let s=0;s<r;s++)i.push(e&&t==s?1:0);s.push(i)}return new t(s)}static createBlankMatrix(r,e){let s=[];for(let t=0;t<r;t++){let t=[];for(let r=0;r<e;r++)t.push(0);s.push(t)}return new t(s)}static multiply(r,e){if(r.columns!=e.rows)throw new Error("Cannot multiply these two matrices together");const s=t.createBlankMatrix(r.rows,e.columns);for(let t=0;t<r.rows;t++)for(let i=0;i<e.columns;i++){let a=0;for(let s=0;s<r.columns;s++)a+=r.matrix[t][s]*e.matrix[s][i];s.matrix[t][i]=a}return s}get(t,r){return this.matrix[t][r]}multiply(r){return t.multiply(this,r)}transpose(){let r=t.createBlankMatrix(this.columns,this.rows);for(let t=0;t<r.rows;t++)for(let e=0;e<r.columns;e++)r.matrix[t][e]=this.matrix[e][t];return r}isSquare(){return this.rows===this.columns}inverse(){if(!this.isSquare())throw new Error("Can't get inverse of non-square matrix!");let r=t.createBlankSquareMatrixFromDimensions(this.rows);const e=t.getDeterminant(this,this.rows);if(0==e)throw new Error("Matrix is singular, can't find inverse");const s=t.createBlankSquareMatrixFromDimensions(this.rows);t.adjoint(this,s);for(let t=0;t<this.rows;t++)for(let i=0;i<this.rows;i++)r.matrix[t][i]=s.matrix[t][i]/e;return r}static adjoint(r,e){if(1==r.rows)return void(e.matrix[0][0]=1);let s=1;const i=t.createBlankSquareMatrixFromDimensions(r.rows);for(let a=0;a<r.rows;a++)for(let o=0;o<r.rows;o++)t.getCofactor(r,i,a,o,r.rows),s=(a+o)%2==0?1:-1,e.matrix[o][a]=s*t.getDeterminant(i,r.rows-1)}static getCofactor(t,r,e,s,i){let a=0,o=0;for(let n=0;n<i;n++)for(let l=0;l<i;l++)n!=e&&l!=s&&(r.matrix[a][o++]=t.matrix[n][l],o==i-1&&(o=0,a++))}static getDeterminant(r,e){let s=0;if(1==e)return r.matrix[0][0];let i=t.createBlankSquareMatrixFromDimensions(r.rows),a=1;for(let o=0;o<e;o++)t.getCofactor(r,i,0,o,e),s+=a*r.matrix[0][o]*t.getDeterminant(i,e-1),a*=-1;return s}}addEventListener("message",({data:r})=>{const e=t.multiply(r.data.leftMatrix,r.data.rightMatrix);postMessage({result:e,dataIndex:r.dataIndex})})}();